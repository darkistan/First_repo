def gauss(A, b):
    # Кількість рівнянь (тобто кількість рядків у матриці A)
    n = len(b)

    # === Формування розширеної матриці [A | b] ===
    # Додаємо вектор вільних членів b як останній стовпець до матриці A
    for i in range(n):
        A[i].append(b[i])

    # === Прямий хід методу Гауса ===
    # Мета: перетворити матрицю у верхню трикутну форму
    for i in range(n):
        # --- Знаходимо головний елемент (півод) ---
        # Вибираємо рядок з найбільшим за модулем елементом у поточному стовпці (для зменшення похибки)
        max_row = max(range(i, n), key=lambda r: abs(A[r][i]))

        # Якщо рядок з найбільшим елементом не той, що зараз — міняємо їх місцями
        A[i], A[max_row] = A[max_row], A[i]

        # --- Ділимо рядок на головний елемент ---
        # Беремо елемент на діагоналі (головний елемент)
        pivot = A[i][i]

        # Якщо головний елемент дорівнює нулю — система не має єдиного розв’язку
        if pivot == 0:
            raise ValueError("Система не має розв’язку або має нескінченно багато розв’язків")

        # Нормуємо рядок — ділимо кожен елемент у рядку на pivot, щоб зробити головний елемент = 1
        for j in range(i, n + 1):  # n+1, бо в нас розширена матриця
            A[i][j] /= pivot

        # --- Виключення змінної з інших рядків ---
        # Робимо всі інші елементи в поточному стовпці рівними нулю
        for r in range(n):
            # Пропускаємо поточний рядок (там уже головний елемент = 1)
            if r != i:
                # Знаходимо коефіцієнт, на який потрібно помножити поточний рядок
                factor = A[r][i]
                # Віднімаємо від рядка r поточний рядок i, помножений на factor
                for j in range(i, n + 1):
                    A[r][j] -= factor * A[i][j]

    # === Отримання результату ===
    # Після прямого ходу матриця має вигляд [I | x],
    # де I — одинична матриця, а останній стовпець — шукані розв’язки
    x = [A[i][-1] for i in range(n)]

    # Повертаємо розв’язок системи у вигляді списку чисел
    return x


# === Приклад використання ===
# Задаємо матрицю коефіцієнтів A та вектор вільних членів b
A = [
    [2.0, 1.0, -1.0],   # Рівняння 1: 2x +  y -  z = 8
    [-3.0, -1.0, 2.0],  # Рівняння 2: -3x - y + 2z = -11
    [-2.0, 1.0, 2.0]    # Рівняння 3: -2x + y + 2z = -3
]

b = [8.0, -11.0, -3.0]

# Викликаємо функцію методу Гауса
solution = gauss(A, b)

# Виводимо знайдений розв’язок системи
print("Розв’язок системи:", solution)

